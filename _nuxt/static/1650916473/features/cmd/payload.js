__NUXT_JSONP__("/features/cmd", (function(a,b,c,d,e,f,g,h,i,j,k,l,m){return {data:[{document:{slug:"cmd",description:"",title:"Command Line",position:16,category:"Features",toc:[],body:{type:"root",children:[{type:b,tag:d,props:{},children:[{type:a,value:"Advisor developers should be able to upload their advisors via the command line. The question is whether we should allow them to upload multiple files via a zip folder, with one file as the entry file or only allow them to upload one file which contains the entire logic."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:k,props:{},children:[{type:a,value:l}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Users should also be able to set secret keys which they will then be able to use later in the SDK."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:k,props:{},children:[{type:a,value:l}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"To test their advisors, exposes the functions on a local host. All of the Yieldster Backend functions would all still remain functional, but we would provide them with a port that simulates rather than executions the order balancer calls."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:k,props:{},children:[{type:a,value:"Yieldster run file.py\n\n\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Every sdk has a smart contract. It is either our vault or their custom smart contract. Their smart contract should implement the deposit and withdrawal function, some form of token transformation."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Question for developers:"}]},{type:a,value:c},{type:b,tag:"ul",props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Should we limit external ULR request?"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"How can the users test the app in their own enviroment."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Key value store vs relational database. Allow them to set their own database"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Yieldster.finance should be created as any other Advisor"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Should they have to initilize data sources they are going to use?"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Token Documentation:"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We need data helper functions. Pass in data as class with raw data and helper functions"}]}]},dir:"\u002Fen\u002Ffeatures",path:"\u002Fen\u002Ffeatures\u002Fcmd",extension:".md",createdAt:m,updatedAt:m,to:"\u002Ffeatures\u002Fcmd"},prev:{title:"Order history",path:"\u002Fen\u002Ffeatures\u002Forder-history",to:"\u002Ffeatures\u002Forder-history"},next:null}],fetch:{},mutations:[]}}("text","element","\n","p","li","div","nuxt-content-highlight","pre","language-text","line-numbers","code","$ Yieldster upload file.py\n\n$ Yieldster upload folder.zip\n\n","2022-04-25T19:53:41.340Z")));
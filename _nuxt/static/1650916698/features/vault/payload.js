__NUXT_JSONP__("/features/vault", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){return {data:[{document:{slug:"vault",description:"",title:"Vault",position:8,category:"Features",toc:[],body:{type:"root",children:[{type:c,tag:l,props:{},children:[{type:a,value:"A Yieldster vault listed on the automation platform must implement the following function. The vault classes exposes the appropriate http portal to each function call. For example  \"\u002Fvault\u002F"},{type:c,tag:"id",props:{},children:[{type:a,value:"\u002Fdeposit\" will call the deposit function in the class myVault."}]}]},{type:a,value:b},{type:c,tag:f,props:{className:[g]},children:[{type:c,tag:h,props:{className:[i,j]},children:[{type:c,tag:k,props:{},children:[{type:a,value:"from Yieldster.vault import VaultClass\n\nclass myVault(VaultClass):\n\n    withdrawalAssets = [{token:chain}]\n    depositAssets = [{token:chain}]\n    whiteList = [{address:chain}]\n\n    def deposit(address, amount):\n        pass\n\n    def withdrawal(address, amount):\n        pass\n\n    def swap():\n        pass\n\n    def addWhiteList(address):\n        pass\n\n    def removeWhiteList(address):\n        pass\n    \n    isWhitelist(address):\n        pass\n\n"}]}]}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"withdrawalAssets\n"},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:m}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"depositAssets\n"},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:m}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"whiteList\n"},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"a list of addresses and their corresponding chain"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"deposit\n"},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:n}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"withdrawal\n"},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:n}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"Alternatively white list group can be added"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:f,props:{className:[g]},children:[{type:c,tag:h,props:{className:[i,j]},children:[{type:c,tag:k,props:{},children:[{type:a,value:"from Yieldster.vault import vaultClass\nfrom Yieldster.whitelist import accreditedInvestor\n\nclass myVault(vaultClass):\n    \n    isWhitelist(address):\n        return accreditedInvestor[address]\n\n"}]}]}]},{type:a,value:b},{type:c,tag:l,props:{},children:[{type:a,value:"The following are static variables of the vault"}]},{type:a,value:b},{type:c,tag:f,props:{className:[g]},children:[{type:c,tag:h,props:{className:[i,j]},children:[{type:c,tag:k,props:{},children:[{type:a,value:"from Yieldster.vault import vaultClass\n\nclass myVault(vaultClass):\n\n    self.address\n    self.address.chainName \n    self.NAV\n\n"}]}]}]},{type:a,value:b},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"self.address:\n"},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"An array\u002Fobject of the vaults addresses on all chains approved by the APS"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"self.address.chainName\n"},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"An object with vault address and its corresponding chain"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"self.NAV\n"},{type:c,tag:e,props:{},children:[{type:a,value:b},{type:c,tag:d,props:{},children:[{type:a,value:"the total value of all assets held in the vault"}]},{type:a,value:b}]},{type:a,value:b}]},{type:a,value:b}]}]},dir:"\u002Fen\u002Ffeatures",path:"\u002Fen\u002Ffeatures\u002Fvault",extension:".md",createdAt:o,updatedAt:o,to:"\u002Ffeatures\u002Fvault"},prev:{title:"Path",path:"\u002Fen\u002Ffeatures\u002Fpath",to:"\u002Ffeatures\u002Fpath"},next:{title:"Data",path:"\u002Fen\u002Ffeatures\u002Fdata",to:"\u002Ffeatures\u002Fdata"}}],fetch:{},mutations:[]}}("text","\n","element","li","ul","div","nuxt-content-highlight","pre","language-text","line-numbers","code","p","a list of token addresses and their corresponding chain","returns a bytecode that can be executed by metamask","2022-04-25T19:57:25.767Z")));